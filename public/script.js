document.addEventListener('DOMContentLoaded', () => {
  const generateBtn = document.getElementById('generateBtn');
  const progressBar = document.getElementById('progress');
  const statusEl = document.getElementById('status');
  const logEl = document.getElementById('log');

  const API_BASE_URL = 'http://localhost:3000';
  const BATCH_SIZE = 200;
  let isGenerating = false;
  let brandsData = [];

  function log(message, isError = false) {
    const timestamp = new Date().toLocaleTimeString();
    const entry = document.createElement('div');
    entry.textContent = `[${timestamp}] ${message}`;
    entry.style.color = isError ? '#ff4444' : '#333333';
    entry.style.padding = '4px';
    entry.style.margin = '2px 0';
    entry.style.borderLeft = isError ? '3px solid #ff4444' : '3px solid #4CAF50';
    logEl.appendChild(entry);
    logEl.scrollTop = logEl.scrollHeight;
    
    if (isError) console.error(message);
    else console.log(message);
  }

  async function fetchBrands() {
    try {
      log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      const response = await fetch(`${API_BASE_URL}/api/brands`);
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
      }

      const data = await response.json();
      if (!data.success || !Array.isArray(data.brands)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–µ–Ω–¥–∞—Ö');
      }

      brandsData = data.brands;
      log(`–ü–æ–ª—É—á–µ–Ω–æ ${brandsData.length} –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
      return true;
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤: ${error.message}`, true);
      return false;
    }
  }

  async function generateBrandCanvas(brand) {
    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.left = '-9999px';
    container.style.width = '900px';
    container.style.height = '1200px';
    document.body.appendChild(container);

    try {
      const template = document.getElementById('template');
      const clone = template.cloneNode(true);
      clone.style.display = 'block';
      
      clone.querySelector('.canvas__title').textContent = brand.brand;
      clone.querySelector('.canvas__desc').textContent = brand.description;

      container.appendChild(clone);
      await new Promise(resolve => setTimeout(resolve, 100));

      const canvas = await html2canvas(clone, {
        scale: 1,
        width: 900,
        height: 1200,
        logging: true
      });

      if (!canvas || canvas.width === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å canvas');
      }

      return canvas;
    } finally {
      container.remove();
    }
  }

  async function uploadImageBatch(batch) {
    const formData = new FormData();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ Canvas –≤ Blob
    const blobs = await Promise.all(
      batch.map(async ({canvas, brand}) => {
        return new Promise((resolve) => {
          canvas.toBlob(blob => {
            resolve({blob, brand});
          }, 'image/png', 0.9);
        });
      })
    );

    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ Blob –≤ FormData
    blobs.forEach(({blob, brand}) => {
      formData.append('images', blob, `${brand.brand}.png`);
    });

    try {
      log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—á–∫–∏ –∏–∑ ${batch.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);
      const response = await fetch(`${API_BASE_URL}/api/upload-batch`, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      if (!result.success) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
      }

      log(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${result.count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      return result.count;
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—á–∫–∏: ${error.message}`, true);
      throw error;
    }
  }

  async function generateAllImages() {
    if (isGenerating) return;
    isGenerating = true;
    generateBtn.disabled = true;
    
    let successCount = 0;
    const startTime = performance.now();
    logEl.innerHTML = '';
    log('–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');

    try {
      if (!await fetchBrands() || brandsData.length === 0) {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–µ–Ω–¥–∞—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      }

      for (let i = 0; i < brandsData.length; i += BATCH_SIZE) {
        const batchBrands = brandsData.slice(i, i + BATCH_SIZE);
        log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—á–∫–∏ ${Math.floor(i/BATCH_SIZE) + 1} (–±—Ä–µ–Ω–¥—ã ${i+1}-${Math.min(i+BATCH_SIZE, brandsData.length)})`);

        const batch = await Promise.all(
          batchBrands.map(async brand => ({
            brand,
            canvas: await generateBrandCanvas(brand)
          }))
        );

        try {
          const uploadedCount = await uploadImageBatch(batch);
          successCount += uploadedCount;
        } catch (error) {
          batch.forEach(({brand}) => {
            log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${brand.brand}`, true);
          });
        }

        const progress = Math.min(i + BATCH_SIZE, brandsData.length) / brandsData.length * 100;
        progressBar.style.width = `${progress}%`;
        statusEl.textContent = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Math.min(i + BATCH_SIZE, brandsData.length)} –∏–∑ ${brandsData.length}`;
      }
    } catch (error) {
      log(`üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, true);
    } finally {
      const totalTime = ((performance.now() - startTime) / 1000).toFixed(2);
      log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${successCount}/${brandsData.length}`);
      log(`–û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime} —Å–µ–∫`);
      statusEl.textContent = `–ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ: ${successCount}/${brandsData.length}`;
      generateBtn.disabled = false;
      isGenerating = false;
    }
  }

  generateBtn.addEventListener('click', generateAllImages);
  log('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞. –ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"');
});