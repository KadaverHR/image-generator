const { transliterate } = window.transliteration || {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
function safeFilename(brand) {
  if (!brand?.id || !brand?.brand) return `brand_${Math.random().toString(36).substr(2, 8)}`;

  try {
    const translit = transliterate(brand.brand);
    const cleanBrand = translit
      .toLowerCase()
      .replace(/[^a-z0-9]/g, '_')
      .replace(/_+/g, '_')
      .replace(/^_+|_+$/g, '')
      .slice(0, 50);
    return `${brand.id}-${cleanBrand}`;
  } catch (error) {
    console.error('Transliteration error:', transliterate(brand));
    return `${brand.id}`;
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const generateBtn = document.getElementById('generateBtn');
  const progressBar = document.getElementById('progress');
  const statusEl = document.getElementById('status');
  const logEl = document.getElementById('log');

  const API_BASE_URL = 'http://localhost:3000';
  const BATCH_SIZE = 50; // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  let isGenerating = false;
  let brandsData = [];
  let processedCount = 0;

  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  function log(message, isError = false) {
    const timestamp = new Date().toLocaleTimeString();
    const entry = document.createElement('div');
    entry.className = isError ? 'log-entry error' : 'log-entry';
    entry.innerHTML = `[${timestamp}] ${message}`;
    logEl.appendChild(entry);
    logEl.scrollTop = logEl.scrollHeight;

    if (isError) console.error(message);
    else console.log(message);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
  async function fetchBrands() {
    try {
      log('‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤...');
      const response = await fetch(`${API_BASE_URL}/api/brands`);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }

      const data = await response.json();
      if (!data?.success || !Array.isArray(data.brands)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–µ–Ω–¥–∞—Ö');
      }

      brandsData = data.brands.filter(b => b?.brand); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
      log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${brandsData.length} –±—Ä–µ–Ω–¥–æ–≤`);
      return true;
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤: ${error.message}`, true);
      return false;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞
  async function generateBrandCanvas(brand) {
    const container = document.createElement('div');
    container.className = 'hidden-canvas-container';
    document.body.appendChild(container);

    try {
      const template = document.getElementById('template');
      if (!template) throw new Error('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');

      const clone = template.cloneNode(true);
      clone.style.display = 'block';

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      clone.querySelector('.canvas__title').textContent = brand.brand || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
      clone.querySelector('.canvas__desc').textContent = brand.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      clone.querySelector('.canvas__country').textContent = brand.country;

      container.appendChild(clone);

      // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
      await new Promise(resolve => setTimeout(resolve, 100));

      const canvas = await html2canvas(clone, {
        scale: 1,
        width: 900,
        height: 1200,
        logging: false,
        useCORS: true
      });

      if (!canvas || canvas.width === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å canvas');
      }

      return canvas;
    } finally {
      container.remove();
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—á–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async function uploadImageBatch(batch) {
    const formData = new FormData();
    let successInBatch = 0;

    // –°–æ–∑–¥–∞–µ–º blob'—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const blobs = await Promise.all(
      batch.map(async ({ canvas, brand }) => {
        try {
          if (!canvas) throw new Error('Canvas –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

          const blob = await new Promise((resolve, reject) => {
            canvas.toBlob(
              blob => blob ? resolve(blob) : reject(new Error('Blob creation failed')),
              'image/png',
              0.9
            );
          });

          return { blob, brand };
        } catch (error) {
          log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${brand?.brand || 'unknown'}: ${error.message}`, true);
          return null;
        }
      })
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    blobs.forEach((item, index) => {
      if (item?.blob) {
        const filename = `${safeFilename(batch[index].brand)}.png`;
        formData.append('images', item.blob, filename);
        successInBatch++;
      }
    });

    if (successInBatch === 0) {
      throw new Error('–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞—á–∫–µ');
    }

    try {
      log(`‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—á–∫–∏ (${successInBatch}/${batch.length} —Ñ–∞–π–ª–æ–≤)...`);
      const response = await fetch(`${API_BASE_URL}/api/upload-batch`, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP ${response.status}`);
      }

      const result = await response.json();
      log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${result.count || successInBatch} —Ñ–∞–π–ª–æ–≤`);
      return result.count || successInBatch;
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—á–∫–∏: ${error.message}`, true);
      throw error;
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  async function generateAllImages() {
    if (isGenerating) return;
    isGenerating = true;
    generateBtn.disabled = true;
    processedCount = 0;

    const startTime = performance.now();
    logEl.innerHTML = '';
    log('üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');

    try {
      // 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      if (!await fetchBrands() || brandsData.length === 0) {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      }

      // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—á–∫–∞–º–∏
      for (let i = 0; i < brandsData.length; i += BATCH_SIZE) {
        const batchIndex = Math.floor(i / BATCH_SIZE) + 1;
        const batchBrands = brandsData.slice(i, i + BATCH_SIZE);

        log(`\n--- –ü–∞—á–∫–∞ ${batchIndex} (${i + 1}-${Math.min(i + BATCH_SIZE, brandsData.length)}) ---`);

        try {
          // 2.1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          const batch = await Promise.all(
            batchBrands.map(async brand => {
              try {
                const canvas = await generateBrandCanvas(brand);
                return { brand, canvas };
              } catch (error) {
                log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${brand.brand}: ${error.message}`, true);
                return null;
              }
            })
          );

          // 2.2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞
          const validItems = batch.filter(item => item?.canvas);
          if (validItems.length > 0) {
            const uploaded = await uploadImageBatch(validItems);
            processedCount += uploaded;
          } else {
            log('‚ÑπÔ∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞—á–∫–µ');
          }
        } catch (error) {
          log(`‚õî –ü—Ä–æ–ø—É—Å–∫ –ø–∞—á–∫–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${error.message}`, true);
        }

        // 2.3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progress = Math.min(i + BATCH_SIZE, brandsData.length) / brandsData.length * 100;
        progressBar.style.width = `${progress}%`;
        statusEl.textContent = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${Math.min(i + BATCH_SIZE, brandsData.length)}/${brandsData.length} | –£—Å–ø–µ—à–Ω–æ: ${processedCount}`;
      }
    } catch (error) {
      log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, true);
    } finally {
      const totalTime = ((performance.now() - startTime) / 1000).toFixed(1);
      log(`\nüèÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${totalTime} —Å–µ–∫`);
      log(`–ò—Ç–æ–≥–æ: ${processedCount}/${brandsData.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);

      statusEl.textContent = `–ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ: ${processedCount}/${brandsData.length}`;
      generateBtn.disabled = false;
      isGenerating = false;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  generateBtn.addEventListener('click', generateAllImages);
  log('–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"');
});